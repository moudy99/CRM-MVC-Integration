@model List<BLL.Models.MovementsModel>

@{
    ViewBag.Title = "Movements";
}
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />

<style>

    .movements-container {
        margin-top: 20px;
    }

    .table {
        width: 100%;
        max-width: 800px;
        margin: auto;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

        .table th, .table td {
            padding: 15px;
            text-align: left;
        }

    .btn-primary, .add-Movment {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
    }

        .btn-primary:hover, .add-Movment:hover {
            background-color: #0056b3;
        }

    /* Modal and radio button styles */
    .modal-header {
        background-color: #007bff;
        color: white;
    }

    .modal-footer .btn-primary {
        background-color: #007bff;
    }

    .radio-group {
        display: flex;
        gap: 20px;
        align-items: center;
        margin-top: 15px;
    }

        .radio-group label {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
        }

        .radio-group input[type="radio"] {
            display: none;
        }

        .radio-group label span {
            padding: 8px 12px;
            border-radius: 4px;
            border: 1px solid #ddd;
            transition: all 0.3s;
        }

        .radio-group input[type="radio"]:checked + span {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

    .loader {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: none;
        position: relative;
        background: linear-gradient(0deg, rgba(255, 61, 0, 0.2) 33%, #ff3d00 100%);
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%,-50%);
        z-index: 666666666666;
    }

        .loader::after {
            content: '';
            box-sizing: border-box;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: #263238;
        }

    @@keyframes rotation {
        0% {
            transform: rotate(0deg)
        }

        100% {
            transform: rotate(360deg)
        }
    }



    .overlay {
        width: 100%;
        height: 100%;
        background-color: #2632386b;
        position: absolute;
        top: 0;
        left: 0;
        display: none;
        z-index: 66666666666;
    }

    .add-movement:hover {
        background-color: #bb2d3b;
        transition: all .3s ease-in-out;
        transform: translateX(2px);
        box-shadow: -2px 3px #00000061;
        border: none;
    }
</style>

<main aria-labelledby="title">

    @*--------------------Spinner---------------------------------*@
    <div class="overlay"></div>
    <span class="loader"></span>

    <h1 id="title">Product Movements</h1>
    <button class="btn btn-lg btn-dark add-movement" onclick="showAddMovementModal()">Add New Movement</button>
    <div class="movements-container">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Quantity Moved</th>
                    <th>Moved Name</th>
                    <th>Moved Type</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    foreach (var movement in Model)
                    {
                        <tr>
                            <td>@movement.Product.Name</td>
                            <td>@movement.MovedQuntity</td>
                            <td>@movement.MovedName</td>
                            <td>@(movement.MovmentType == 1 ? "In" : "Out")</td>
                            <td>
                                <a href="@Url.Action("ProductDetails", "Products", new { id = movement.MovedProductId })" class="btn btn-primary">
                                    View Product
                                </a>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No movements available.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</main>

<!-- Modal -->
<div class="modal fade" id="addMovmentModel" tabindex="-1" role="dialog" aria-labelledby="addMovmentModel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add New Movement</h5>
            </div>
            <div class="modal-body">
                <form id="addMovementForm">
                    <div class="form-group">
                        <label for="MovedProductId">Product</label>
                        <select class="form-control" id="MovedProductId" required>
                            <option value="">Select a product</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="MovedName">Move Name</label>
                        <input type="text" class="form-control" id="MovedName" placeholder="Enter Move Name" required />
                    </div>
                    <div class="form-group">
                        <label for="movedQuantity">Quantity</label>
                        <input type="number" class="form-control" id="movedQuantity" placeholder="Enter quantity" required />
                    </div>
                    <div class="radio-group">
                        <label>
                            <input type="radio" name="movementType" value="1" required>
                            <span>In</span>
                        </label>
                        <label>
                            <input type="radio" name="movementType" value="2" required>
                            <span>Out</span>
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModel()">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitMovementForm()">Add Movement</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    const overlay = document.querySelector(".overlay");
    const loader = document.querySelector(".loader");

    function showLoader() {
        overlay.style.display = "block";
        loader.style.display = "inline-block";
    }

    function hideLoader() {
        overlay.style.display = "none";
        loader.style.display = "none";
    }

    function closeModel() {
        $('#addMovmentModel').modal('hide');
    }

    let AllProducts;

    async function getAvailableProducts() {
        try {
            showLoader();
            const response = await $.ajax({
                url: '/Product/GetAllProducts',
                type: 'GET'
            });
            hideLoader();
            AllProducts = response;
            populateProductSelect(response);
        } catch (error) {
            hideLoader();
            showError("Error fetching products.");
        }
    }

    function populateProductSelect(products) {
        const productSelect = $('#MovedProductId');
        productSelect.empty();
        productSelect.append('<option value="">Select a product</option>');
        products.forEach(product => {
            productSelect.append(`<option value="${product.ProductId}">${product.Name}</option>`);
        });
    }

    function showAddMovementModal() {
        getAvailableProducts().then(() => {
            $('#addMovmentModel').modal('show');
        });
    }

    function showError(message) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: message
        });
    }

    async function submitMovementForm() {
        showLoader();

        const productId = $('#MovedProductId').val();
        const movedQuantity = $('#movedQuantity').val();
        const movementType = $('input[name="movementType"]:checked').val();
        const movedName = $('#MovedName').val();

        try {
            const currentProduct = AllProducts.find(prod => prod.ProductId === productId);
            const currentStock = currentProduct?.CurrentStock || 0;

            if (currentStock < movedQuantity && Number(movementType) == 2) {
                hideLoader();
                Swal.fire({
                    icon: "error",
                    title: "Error",
                    html: '<span style="color: #bb2d3b;">Not enough stock available to complete this movement. Please adjust the quantity or check inventory levels.</span>'
                });

            }

            if (productId && movedQuantity && movementType && movedName) {
                const response = await $.ajax({
                    url: '@Url.Action("AddMovement", "Movement")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        MovedProductId: productId,
                        MovedQuntity: parseInt(movedQuantity, 10),
                        MovmentType: parseInt(movementType, 10),
                        MovedName: movedName
                    })
                });

                hideLoader();
                $('#addMovmentModel').modal('hide');
                $('#addMovementForm')[0].reset();

                if (response.success) {
                    location.reload();
                } else {
                    showError("Failed to add movement: " + response.message);
                }
            } else {
                hideLoader();
                showError("Please fill in all fields.");
            }
        } catch (error) {
            hideLoader();
            showError("An error occurred while adding the movement.");
        }
    }
</script>
